{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "caf11184",
   "metadata": {},
   "source": [
    "# Mastermind code refactored\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b83a1b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hey welcome to\u001b[1m IronMastermind ! 🤩\u001b[0m\n",
      " Your goal is to find the 4 color combination that the computer chose and you need to find their right place. \n",
      " You have 12 turns in order to do so, and you'll get information at each turn regarding correct colors as well as \n",
      "correct colors that are are the right place. \n",
      "Ready to play? 🙌\n",
      "\n",
      "    Please enter a suite of 4 colors;\n",
      "    Use ‘g’ for Green 🟢 ; ‘b' for Blue 🔵 ; ‘y’ for Yellow 🟡 ; 'r’ for Red 🔴 ;  p for Purple 🟣; o for Orange 🟠\n",
      "    For exemple : type gbwy and press enter for Green-Blue-White-Yellow 🟢🔵⚪️🟡\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "# Libraries\n",
    "import random\n",
    "import re\n",
    "\n",
    "#************************ Functions \n",
    "\n",
    "#Function to Randomise color combination AM-12\n",
    "# input : a dictionary with colors like : { 1 char key : color name }  {\"g\": \"Green\", \"b\": \"Blue\"}\n",
    "# output : a list of 4 elements with a random choices of key colors like : ['w', 'g', 'w', 'b']\n",
    "def RandomiseColor(L_Color_dictionary):\n",
    "    random.seed()  #initialise the random sequence\n",
    "    Color_list = list(Color_dictionary.keys())  # we make a list of all color keys\n",
    "    return random.choices(Color_list, k = 4)    # we choose 4 elements in this list\n",
    "\n",
    "#Function to get a color code from letter\n",
    "# input : an letter in (k,g,b,w,y,r,p)\n",
    "# output : a colorised string like ''\\033[1;30;1;4mk\\033[0m' for k\n",
    "def DisplayEmoji(L_char):\n",
    "    MyStr = ''\n",
    "    if L_char == 'g':\n",
    "        MyStr = '\\U0001F7E2'\n",
    "    elif L_char == 'b':\n",
    "        MyStr = '\\U0001F534'\n",
    "    elif L_char == 'y':\n",
    "        MyStr = '\\U0001F7E1'\n",
    "    elif L_char == 'r':\n",
    "        MyStr = '\\U0001F534'\n",
    "    elif L_char == 'p':\n",
    "        MyStr = '\\U0001F7E3'\n",
    "    elif L_char == 'o':\n",
    "        MyStr = '\\U0001F7E0'\n",
    "    return MyStr\n",
    "    \n",
    "\n",
    "#Function to display all combinaison the user played\n",
    "# input : a list of list of 4 elements with a user choices of key colors and scores like : ['w', 'g', 'w', 'b',2,1]\n",
    "# output : just print output\n",
    "def DisplayUserConbinations(L_user_combination):\n",
    "    for i in range(0,len(L_user_combination)):\n",
    "        Lign = '|' + DisplayEmoji(L_user_combination[i][0]) + '|' + DisplayEmoji(L_user_combination[i][1]) + '|' + DisplayEmoji(L_user_combination[i][2])\n",
    "        Lign = Lign + '|' + DisplayEmoji(L_user_combination[i][3]) + '|-|' + str(L_user_combination[i][4]) + '|' + str(L_user_combination[i][5]) + '|'\n",
    "        print(Lign)\n",
    "    \n",
    "\n",
    "\n",
    "#Function to Ask the user for a combination AM-14\n",
    "# input : a dictionary with colors like : { 1 char key : color name }  {\"g\": \"Green\", \"b\": \"Blue\"}\n",
    "# output : a list of 4 elements with a random choices of key colors like : ['w', 'g', 'w', 'p']\n",
    "def inputCombination(L_Color_dictionary):\n",
    "    \n",
    "    #local variables initialisation\n",
    "    L_input_valid = False\n",
    "    L_question = 'Please enter a suite of 4 colors (g -> 🟢, b -> 🔵, y -> 🟡, r -> 🔴, p -> 🟣, o -> 🟠 or ? for help) \\n' \n",
    "    L_help = \"\"\"\n",
    "    Please enter a suite of 4 colors;\n",
    "    Use ‘g’ for Green 🟢 ; ‘b' for Blue 🔵 ; ‘y’ for Yellow 🟡 ; 'r’ for Red 🔴 ;  p for Purple 🟣; o for Orange 🟠\n",
    "    For exemple : type gbwy and press enter for Green-Blue-White-Yellow 🟢🔵⚪️🟡\n",
    "    \"\"\"\n",
    "    \n",
    "    #Loop untill input_valid\n",
    "    while L_input_valid == False:\n",
    "        # display help at first turn\n",
    "        if G_count_turns == 0:\n",
    "            print(L_help)\n",
    "        MyStr = input(L_question)\n",
    "        MyStr = str(MyStr)\n",
    "        MyStr = MyStr.lower()\n",
    "        \n",
    "        # display help when input is '?'\n",
    "        if MyStr == '?' and not G_count_turns == 0:\n",
    "            print(L_help)\n",
    "            continue\n",
    "        if MyStr == 'marcopolo':   #che@t m0de\n",
    "            print(G_computer_combination)\n",
    "            continue\n",
    "        \n",
    "        #Test the validity of the input ,  G_user_combination\n",
    "        pattern = '[gbyrpo]{4}'  #lets use RegEx\n",
    "        if (re.findall(pattern, MyStr) != []):\n",
    "            if len(MyStr)==4:\n",
    "                L_input_valid = True\n",
    "        if L_input_valid == False:\n",
    "            print('The input was not reconized, Please enter a correct suite of 4 colors')\n",
    "    \n",
    "    #output\n",
    "    return list(MyStr)\n",
    "\n",
    "#Function to  Test the combination and build answer AM-15\n",
    "# input : the two list to compare like : ['w', 'g', 'w', 'p'] \n",
    "# output : a tuple (nb good elements, nb misplaced, answer_string)\n",
    "def TestCombination(L_user_combination, L_computer_combination):\n",
    "    \n",
    "    #local variables initialisation\n",
    "    L_good = 0\n",
    "    L_misplaced = 0\n",
    "    \n",
    "    #Count the number of good placed\n",
    "    for i in range(0,4):\n",
    "        if L_computer_combination[i] == L_user_combination[i]:\n",
    "            L_good += 1\n",
    "\n",
    "    #Count the number of misplaced elements\n",
    "    L_user_combination2 =  L_user_combination.copy() #i make a copy to not modify original list (iterable are ByRef)\n",
    "    for i in L_computer_combination:\n",
    "        if i in L_user_combination2:\n",
    "            L_misplaced += 1\n",
    "            L_user_combination2.remove(i)  #remove the element to avoid finding it again\n",
    "    L_misplaced = L_misplaced - L_good  #the good's one are also counted       \n",
    "\n",
    "    #Build an answer\n",
    "    if L_good != 0 or L_misplaced != 0:\n",
    "        L_answer = '\\nYou have ' + '\\033[1m' + str(L_good) + '\\033[0m' + ' elements at the + ''\\033[1m' 'right place' '\\033[0m' '\\n'\n",
    "        L_answer = L_answer + 'You have ' + '\\033[1m' + str(L_misplaced) + '\\033[0m' + ' elements at the + ''\\033[1m' 'wrong place' '\\033[0m' '\\n'\n",
    "    else:\n",
    "        L_answer = 'No elements are present\\n'\n",
    "        \n",
    "    L_answer = L_answer + 'And you have ' + '\\033[1m' +  str(11 -  G_count_turns) + ' turns left ''\\033[0m' '\\n' \n",
    "    #when displaying this message,G_count_turns is +1   \n",
    "    \n",
    "    return (L_good, L_misplaced, L_answer)\n",
    "    \n",
    "\n",
    "#******************* Main program    \n",
    "# Welcome message AM-11\n",
    "\n",
    "print(\"Hey welcome to\" '\\033[1m' + \" IronMastermind ! 🤩\" '\\033[0m' \"\\n Your goal is to find the 4 color combination that the computer chose and you need to find their right place. \\n You have 12 turns in order to do so, and you'll get information at each turn regarding correct colors as well as \\ncorrect colors that are are the right place. \\nReady to play? 🙌\")\n",
    "\n",
    "\n",
    "# Main Loop start\n",
    "G_anothergame = True\n",
    "while G_anothergame:\n",
    "    #Variable Initialisation AM-13\n",
    "    G_PlayerScore = (0,0,'')   #the score of the player (nb good,nb misplaced)\n",
    "    G_count_turns = 0\n",
    "    G_user_combination = []\n",
    "    Color_dictionary = {\"g\": \"Green\", \"b\": \"Blue\", \"y\": \"Yellow\", \"r\": \"Red\", \"p\": \"Purple\", \"o\": \"Orange\"}\n",
    "\n",
    "    # Randomise color combination AM-12\n",
    "    G_computer_combination = RandomiseColor(Color_dictionary)\n",
    "\n",
    "\n",
    "    \n",
    "    while G_PlayerScore[0] < 4:\n",
    "\n",
    "        # Ask the user for a combination AM-14\n",
    "        G_user_combination.append(inputCombination(Color_dictionary))\n",
    "\n",
    "        # Test the combination and build answer AM-15\n",
    "        G_PlayerScore = TestCombination(G_user_combination[G_count_turns], G_computer_combination)\n",
    "        #adding score to user aswer\n",
    "        G_user_combination[G_count_turns].append(G_PlayerScore[0])\n",
    "        G_user_combination[G_count_turns].append(G_PlayerScore[1])\n",
    "        G_count_turns += 1\n",
    "\n",
    "        #Display answer AM-16\n",
    "        print(G_PlayerScore[2])\n",
    "\n",
    "        DisplayUserConbinations(G_user_combination)\n",
    "        if G_count_turns == 12: #End game\n",
    "            break\n",
    "\n",
    "    #End game\n",
    "    if G_PlayerScore[0] == 4:\n",
    "        # Display win message AM-17\n",
    "        print(\"\\nBravo ! you mastered my mind !! 🥳\")\n",
    "    else:\n",
    "        # Display lose message AM-18\n",
    "        print(\"Oh no, no more try left! You lost. 😥 The solution was: \",G_computer_combination)\n",
    "    MyStr= input('Another game ? y/n ')\n",
    "    G_anothergame = MyStr == 'y'\n",
    "        "
   ]
  },
  {
   "cell_type": "raw",
   "id": "bf145d54",
   "metadata": {},
   "source": [
    "What's new :\n",
    "- new function RandomiseColor(L_Color_dictionary)\n",
    "\n",
    "- new function inputCombination(L_Color_dictionary)\n",
    "    - wrong input of user does not count for 1 turn\n",
    "    - question is shorter, help is separated from question\n",
    "    - user input '?' to display help again\n",
    "    \n",
    "- new function TestCombination(L_user_combination, L_computer_combination)\n",
    "- bug in TestCombination: if the computer dice a combinaison with 1 or more identic color like ['g', 'y', 'k', 'y']\n",
    "                                                                                              \n",
    "        missplaced element can be counted multiple time, and shouldn't\n",
    "        list is now copied and element are removed when 'in list' match\n",
    "\n",
    "- G_PlayerScore: added good & missplaced score at the end\n",
    "                 use a apped=nd to have multiline and save previous answers\n",
    "                 [['k', 'k', 'k', 'k', 1, 0], ['k', 'k', 'p', 'k', 1, 1], ['k', 'p', 'b', 'y', 4, 0]]\n",
    "                 \n",
    "- new function DisplayUserConbinations(L_user_combination)\n",
    "    to show user input in a tab like:\n",
    "            |k|k|k|k|-|1|0|\n",
    "            |y|k|k|k|-|1|1|\n",
    "            |y|g|y|k|-|0|4|\n",
    "        \n",
    "\n",
    "- if loose, display the solution. It is so frustating without !!!\n",
    "- added a 'while G_anothergame:' loop to play again\n",
    "- at school all variables should start with G_ for global, L_ for local (inside functions)\n",
    "- cheat mode added, read the code to find how to use it\n",
    "- new function def GetColorCode(L_char)   adding color !!\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da1e75cd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
